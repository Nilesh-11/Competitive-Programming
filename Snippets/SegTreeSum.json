{
	"Segment Tree": {
		"prefix": "segment_tree_sum",
		"body": [
		  "template<class T>",
		  "class SegmentTree{",
		  "public:",
		  "    int n;",
		  "    vector<T> a;",
		  "",
		  "    SegmentTree() : n(0){}",
		  "    SegmentTree(int sz) : a(4 * n, 0), n(sz){}",
		  "    SegmentTree(const vector<T> &v){",
		  "        this->n = v.size();",
		  "        a.resize(4 * n, 0);",
		  "        build(1, 0, n - 1, v);",
		  "    }",
		  "",
		  "    void build(int p, int l, int r, const vector<T> &v){",
		  "        if(l == r){",
		  "            a[p] = v[l];",
		  "        }",
		  "        else{",
		  "            int m = (l + r) / 2;",
		  "            build(2 * p, l, m, v);",
		  "            build(2 * p + 1, m + 1, r, v);",
		  "            a[p] = a[2 * p] + a[2 * p + 1];",
		  "        }",
		  "        return;",
		  "    }",
		  "",
		  "    T sum(int p, int l, int r, int x, int y){",
		  "        if(l > y || r < x){",
		  "            return 0;",
		  "        }",
		  "        else if(l >= x && y >= r) {",
		  "            return a[p];",
		  "        }",
		  "        else if(l == r) {",
		  "            return 0;",
		  "        }",
		  "        else{",
		  "            int m = (l + r) / 2;",
		  "            return sum(2 * p, l, m, x, y) + sum(2 * p + 1, m + 1, r, x, y);",
		  "        }",
		  "    }",
		  "    T sum(int l, int r){",
		  "        return sum(1, 0, n - 1, l, r);",
		  "    }",
		  "",
		  "    void update(int p, int l, int r, int pos, T val){",
		  "        if(l == r){",
		  "            a[p] = val;",
		  "        }",
		  "        else{",
		  "            int m = (l + r) / 2;",
		  "            if(pos <= m){",
		  "                update(2 * p, l, m, pos, val);",
		  "            }",
		  "            else{",
		  "                update(2 * p + 1, m + 1, r, pos, val);",
		  "            }",
		  "            a[p] = a[2 * p] + a[2 * p + 1];",
		  "        }",
		  "    }",
		  "    void update(int idx, T val){",
		  "        return update(1, 0, n - 1, idx, val);",
		  "    } ",
		  "};"
		],
		"description": "Segment Tree"
	  }
}