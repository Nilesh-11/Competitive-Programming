{
	"square root decomposition": {
		"prefix": "sqrtDecomposition",
		"body": [
		  "template <class T>",
		  "class sqDecompose{",
		  "public:",
		  "    vector<T> v;",
		  "    vector<T> a;",
		  "    int k;",
		  "    sqDecompose(vector<long long> vec){",
		  "        int n = vec.size();",
		  "        k = sqrt(n) + 1;",
		  "        v.resize(n);",
		  "        a.resize(k);",
		  "        for(int i = 0; i < n; i++){",
		  "            v[i] = vec[i];",
		  "            a[i/k] += vec[i];",
		  "        }",
		  "    }",
		  "",
		  "    bool update(int j, T val){",
		  "        int b = j / k;",
		  "        a[b] -= v[j];",
		  "        a[b] += val;",
		  "        v[j] = val;",
		  "        return 1;",
		  "    }",
		  "",
		  "    T sumRange(int l, int r){",
		  "        T ans = 0;",
		  "        for(int i = l; i <= r;){",
		  "            if(i % k == 0 && i + k - 1 <= r){",
		  "                ans += a[i/k];",
		  "                i += k;",
		  "            }",
		  "            else{",
		  "                ans += v[i];",
		  "                i++;",
		  "            }",
		  "        }",
		  "        return ans;",
		  "    }",
		  "};"
		],
		"description": "square root decomposition"
	  }
}