{
	"Trie implementation": {
		"prefix": "Trie",
		"body": [
		  "class TrieNode{",
		  "    vector<TrieNode*> item;",
		  "    bool isEnd;",
		  "    friend class Trie;",
		  "    TrieNode(): item(26,nullptr){",
		  "        isEnd = 0;",
		  "    }",
		  "};",
		  "",
		  "class Trie : private TrieNode{",
		  "public:",
		  "    TrieNode* node;",
		  "    Trie(){",
		  "        node = new TrieNode();",
		  "    }",
		  "    void insert(string word) {",
		  "        TrieNode* cur = node;",
		  "        for(size_t i = 0; i < word.size(); i++){",
		  "            if(cur->item[word[i] - 'a'] == nullptr)",
		  "                cur->item[word[i] - 'a'] = new TrieNode();",
		  "            cur = cur->item[word[i] - 'a'];",
		  "        }",
		  "        cur->isEnd = 1;",
		  "    }",
		  "    ",
		  "    bool search(string word) {",
		  "        TrieNode* cur = node;",
		  "        for(size_t i = 0; i < word.size(); i++){",
		  "            if(cur->item[word[i] - 'a']){",
		  "                cur = cur->item[word[i] - 'a'];",
		  "            }",
		  "            else return 0;",
		  "        }",
		  "        return cur->isEnd;",
		  "    }",
		  "    ",
		  "    bool startsWith(string prefix) {",
		  "        TrieNode* cur = node;",
		  "        for(size_t i = 0; i < prefix.size(); i++){",
		  "            if(cur->item[prefix[i] - 'a'] != nullptr){",
		  "                cur = cur->item[prefix[i] - 'a'];",
		  "            }",
		  "            else return 0;",
		  "        }",
		  "        return 1;",
		  "    }",
		  "};"
		],
		"description": "Trie implementation"
	  }
}