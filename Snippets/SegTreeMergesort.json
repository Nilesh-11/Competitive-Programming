{
	"LessThanFrequencyCount": {
		"prefix": "SegmentTree_MergeSort",
		"body": [
		  "template<typename T>",
		  "class MergeSortTree{",
		  "public:",
		  "	int n;",
		  "	vector<vector<T>> t;",
		  "",
		  "	MergeSortTree(vector<T> &v){",
		  "		n = v.size();",
		  "		int sz = 1 << (__lg(n) + bool(__builtin_popcount(n) - 1));",
		  "		t.resize(8 * sz + 1, {});",
		  "		build(1, 0, n - 1, v);",
		  "	}",
		  "",
		  "	void build(int cur, int l, int r, vector<T> &a){",
		  "		if(l == r){",
		  "			t[cur].push_back(a[l]);",
		  "			return;",
		  "		}",
		  "		int mid = (l + r) / 2;",
		  "		build(2 * cur + 1, l, mid, a);",
		  "		build(2 * cur + 2, mid + 1, r, a);",
		  "		merge(t[2 * cur + 1].begin(), t[2 * cur + 1].end(), t[2 * cur + 2].begin(), t[2 * cur + 2].end(), back_inserter(t[cur]));",
		  "		return;",
		  "	}",
		  "",
		  "	int FreqCount(int cur, int l, int r, int x, int y, T k){",
		  "		if(y < l || x > r) return 0;",
		  "		else if(x <= l && r <= y) {",
		  "			return lower_bound(t[cur].begin(), t[cur].end(), k) - t[cur].begin();",
		  "		}",
		  "		int mid = (l + r) / 2;",
		  "		return FreqCount(2 * cur + 1, l, mid, x, y, k) + FreqCount(2 * cur + 2, mid + 1, r, x, y, k);",
		  "	}",
		  "",
		  "	// elements less than k, in indexes(l, r)inclusive",
		  "	int FreqCount(int l, int r, T k){",
		  "		return FreqCount(1, 0, n - 1, l, r, k);",
		  "	}",
		  "",
		  "	int RangeFreqCount(int cur, int l, int r, int x, int y, T k, T p){",
		  "		if(y < l || x > r) return 0;",
		  "		else if(x <= l && r <= y) {",
		  "			return lower_bound(t[cur].begin(), t[cur].end(), p) - lower_bound(t[cur].begin(), t[cur].end(), k);",
		  "		}",
		  "		int mid = (l + r) / 2;",
		  "		return RangeFreqCount(2 * cur + 1, l, mid, x, y, k, p) + RangeFreqCount(2 * cur + 2, mid + 1, r, x, y, k, p);",
		  "	}",
		  "",
		  "	// elements in range(k, p)inclusive, in indexes(l, r)inclusive",
		  "	int RangeFreqCount(int l, int r, T k, T p){",
		  "		return RangeFreqCount(1, 0, n - 1, l, r, k, p);",
		  "	}",
		  "};"
		],
		"description": "LessThanFrequencyCount"
	  }
}